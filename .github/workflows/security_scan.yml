name: Secure Web Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  security_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check for Existing Docker Installation
        id: docker-check
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker is already installed."
            echo "skip-docker-install=true" >> $GITHUB_ENV
          else
            echo "skip-docker-install=false" >> $GITHUB_ENV
          fi

      - name: Remove Conflicting Docker Packages (If Any)
        if: env.skip-docker-install == 'false'
        run: |
          sudo apt-get remove -y containerd containerd.io docker docker-engine docker.io docker-ce docker-ce-cli
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/docker /etc/docker
          sudo groupdel docker || true

      - name: Install Docker (Fixed)
        if: env.skip-docker-install == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Grant Docker Permissions
        if: env.skip-docker-install == 'false'
        run: |
          sudo chmod 666 /var/run/docker.sock
          sudo usermod -aG docker $USER
          newgrp docker

      - name: Test Docker Installation
        run: docker --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::615299768374:role/GitHubActionsSecurityRole
          aws-region: us-east-2

      - name: Debug EC2 Connectivity
        run: |
          echo "Testing Connection to EC2..."
          curl -v --connect-timeout 10 --max-time 20 http://3.129.253.217:3000 || (echo "ERROR: Target is unreachable!" && exit 1)

      - name: Run OWASP ZAP Passive Scan (Optimized)
        uses: zaproxy/action-full-scan@v0.5.0
        with:
          target: 'http://3.129.253.217:3000'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          cmd_options: >
            -m 0
            -r /zap/wrk/output/zap_report.html
            -z "
            -config scanner.attackMode=off
            -config passiveScan.enable=true
            -config spider.maxDepth=1
            -config ajaxSpider.enable=false
            -config passiveScan.maxAlertsPerRule=3
            -config api.debug=false
            -config connection.requestTimeout=2000
            -config connection.timeoutInSecs=5
            -config scanner.threadPerHost=1
            "

      - name: Install Snyk CLI
        run: |
          curl -Lo snyk https://github.com/snyk/snyk/releases/latest/download/snyk-linux
          chmod +x snyk
          sudo mv snyk /usr/local/bin/

      - name: Run Snyk Dependency Scan (Optimized)
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --file=requirements.txt --fail-on=upgradable --severity-threshold=high --prune-repeated-subdependencies --project-name "secure-web"

      - name: Upload Scan Results to AWS S3
        run: |
          aws s3 cp /zap/wrk/output/zap_report.html s3://secure-web-scan-results/zap_report.html
          aws s3 cp snyk_scan.json s3://secure-web-scan-results/snyk_scan.json
